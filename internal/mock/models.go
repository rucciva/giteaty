// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rucciva/giteaty/pkg/gitea (interfaces: Models)

// Package mock is a generated GoMock package.
package mock

import (
	models "code.gitea.io/gitea/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockModels is a mock of Models interface
type MockModels struct {
	ctrl     *gomock.Controller
	recorder *MockModelsMockRecorder
}

// MockModelsMockRecorder is the mock recorder for MockModels
type MockModelsMockRecorder struct {
	mock *MockModels
}

// NewMockModels creates a new mock instance
func NewMockModels(ctrl *gomock.Controller) *MockModels {
	mock := &MockModels{ctrl: ctrl}
	mock.recorder = &MockModelsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModels) EXPECT() *MockModelsMockRecorder {
	return m.recorder
}

// GetOrgsByUserID mocks base method
func (m *MockModels) GetOrgsByUserID(arg0 int64, arg1 bool) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgsByUserID indicates an expected call of GetOrgsByUserID
func (mr *MockModelsMockRecorder) GetOrgsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgsByUserID", reflect.TypeOf((*MockModels)(nil).GetOrgsByUserID), arg0, arg1)
}

// GetUserTeams mocks base method
func (m *MockModels) GetUserTeams(arg0 int64, arg1 models.ListOptions) ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTeams", arg0, arg1)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTeams indicates an expected call of GetUserTeams
func (mr *MockModelsMockRecorder) GetUserTeams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTeams", reflect.TypeOf((*MockModels)(nil).GetUserTeams), arg0, arg1)
}

// SearchUsers mocks base method
func (m *MockModels) SearchUsers(arg0 *models.SearchUserOptions) ([]*models.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", arg0)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchUsers indicates an expected call of SearchUsers
func (mr *MockModelsMockRecorder) SearchUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockModels)(nil).SearchUsers), arg0)
}

// UserSignIn mocks base method
func (m *MockModels) UserSignIn(arg0, arg1 string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignIn", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignIn indicates an expected call of UserSignIn
func (mr *MockModelsMockRecorder) UserSignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignIn", reflect.TypeOf((*MockModels)(nil).UserSignIn), arg0, arg1)
}
